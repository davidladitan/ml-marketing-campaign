{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Predicting Positive Responders for a Marketing Campaign\n",
    "Author: David O. Laditan\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "For this project I will be following the workflow which was used in lab 3: Split data into training and test set. Use the training portion to find the best model using grid search and cross-validation. Evaluate the *winner* on the test set."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import mglearn\n",
    "mglearn.plots.plot_grid_search_overview()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 0. Function definitions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.model_selection import cross_validate\n",
    "\n",
    "\n",
    "def get_classifier_cv_score(model, X, y, scoring='accuracy', cv=7):\n",
    "    '''Calculate train and validation score of classifier (model) using cross-validation\n",
    "        \n",
    "        \n",
    "        model (sklearn classifier): Classifier to train and evaluate\n",
    "        X (numpy.array or pandas.DataFrame): Feature matrix\n",
    "        y (numpy.array or pandas.Series): Target vector\n",
    "        scoring (str): a scoring string accepted by sklearn.metrics.cross_validate()\n",
    "        cv (int): number of cross-validation folds see sklearn.metrics.cross_validate()\n",
    "        \n",
    "        returns: mean training score, mean validation score\n",
    "    \n",
    "    '''\n",
    "    scores = cross_validate(model, X, y, scoring= scoring, cv=cv, return_train_score=True)\n",
    "    train_score_mean = scores['train_score'].mean()\n",
    "    val_score_mean = scores['test_score'].mean()\n",
    "    \n",
    "    return train_score_mean, val_score_mean\n",
    "     \n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "def print_grid_search_result(grid_search):\n",
    "    '''Prints best parameters and mean training and validation scores of a grid search object.\n",
    "    \n",
    "        grid_search (sklearn GridSearchCV): Fitted GridSearchCV object\n",
    "        \n",
    "        scores are printed with 3 decimal places.\n",
    "        \n",
    "    '''\n",
    "    print(grid_search.best_params_)\n",
    "    print(\"training score = {:.3f}; validation score = {:.3f}\".format(grid_search.cv_results_['mean_train_score'][grid_search.best_index_],\\\n",
    "                                                             grid_search.cv_results_['mean_test_score'][grid_search.best_index_]))\n",
    "    \n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "import mglearn\n",
    "\n",
    "def plot_grid_search_results(grid_search):\n",
    "    '''For grids with 2 hyperparameters, create a heatmap plot of test scores\n",
    "        \n",
    "        grid_search (sklearn GridSearchCV): Fitted GridSearchCV object\n",
    "        \n",
    "        uses mglearn.tools.heatmap() for plotting.\n",
    "    \n",
    "    '''\n",
    "    results = pd.DataFrame(grid_search.cv_results_)\n",
    "\n",
    "    params = sorted(grid_search.param_grid.keys())\n",
    "    \n",
    "    assert len(params) == 2, \"We can only plot two parameters.\"\n",
    "    \n",
    "    # second dimension in reshape are rows, needs to be the fast changing parameter\n",
    "    scores = np.array(results.mean_test_score).reshape(len(grid_search.param_grid[params[0]]),\n",
    "                                                      len(grid_search.param_grid[params[1]]))\n",
    "\n",
    "    # plot the mean cross-validation scores\n",
    "    # x-axis needs to be the fast changing parameter\n",
    "    mglearn.tools.heatmap(scores, \n",
    "                          xlabel=params[1], \n",
    "                          xticklabels=grid_search.param_grid[params[1]], \n",
    "                          ylabel=params[0], \n",
    "                          yticklabels=grid_search.param_grid[params[0]],\n",
    "                          cmap=\"viridis\", fmt=\"%0.3f\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.metrics import confusion_matrix\n",
    "\n",
    "def plot_confusion_matrix(y_actual, y_pred, labels, title=''):\n",
    "    '''Creates a heatmap plot of the confusion matrix.\n",
    "    \n",
    "        y_actual (pandas.DataSeries or numpy.Array): Ground truth label vector\n",
    "        y_pred (pandas.DataSeries or numpy.Array): Predicted label vector\n",
    "        labels (list(str)): Class names used for plotting (ticklabels)\n",
    "        title (str): Plot title\n",
    "        \n",
    "        uses sklearn.metrics.confusion_matrix\n",
    "        \n",
    "    '''\n",
    "    \n",
    "    matrix = confusion_matrix(y_actual, y_pred)\n",
    "    sns.heatmap(matrix, square= True, annot= True, xticklabels= labels, yticklabels= labels, cbar= False, fmt = 'd')\n",
    "    plt.title(title)\n",
    "    plt.xlabel(\"predicted value\")\n",
    "    plt.ylabel(\"true value\")\n",
    "    \n",
    "   "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 1. Load data\n",
    "Dataset: http://archive.ics.uci.edu/ml/datasets/Bank+Marketing#\n",
    "\n",
    "\n",
    "### 1.1 Prepare a pandas dataframe of all data\n",
    "\n",
    "Load the bank marketing data set into a `DataFrame` variable `df_data`. The delimiter used in the csv file is \";\"\n",
    "Print `data.head()` and `data.info()`.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>age</th>\n",
       "      <th>job</th>\n",
       "      <th>marital</th>\n",
       "      <th>education</th>\n",
       "      <th>default</th>\n",
       "      <th>housing</th>\n",
       "      <th>loan</th>\n",
       "      <th>contact</th>\n",
       "      <th>month</th>\n",
       "      <th>day_of_week</th>\n",
       "      <th>...</th>\n",
       "      <th>campaign</th>\n",
       "      <th>pdays</th>\n",
       "      <th>previous</th>\n",
       "      <th>poutcome</th>\n",
       "      <th>emp.var.rate</th>\n",
       "      <th>cons.price.idx</th>\n",
       "      <th>cons.conf.idx</th>\n",
       "      <th>euribor3m</th>\n",
       "      <th>nr.employed</th>\n",
       "      <th>y</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>30</td>\n",
       "      <td>blue-collar</td>\n",
       "      <td>married</td>\n",
       "      <td>basic.9y</td>\n",
       "      <td>no</td>\n",
       "      <td>yes</td>\n",
       "      <td>no</td>\n",
       "      <td>cellular</td>\n",
       "      <td>may</td>\n",
       "      <td>fri</td>\n",
       "      <td>...</td>\n",
       "      <td>2</td>\n",
       "      <td>999</td>\n",
       "      <td>0</td>\n",
       "      <td>nonexistent</td>\n",
       "      <td>-1.8</td>\n",
       "      <td>92.893</td>\n",
       "      <td>-46.2</td>\n",
       "      <td>1.313</td>\n",
       "      <td>5099.1</td>\n",
       "      <td>no</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>39</td>\n",
       "      <td>services</td>\n",
       "      <td>single</td>\n",
       "      <td>high.school</td>\n",
       "      <td>no</td>\n",
       "      <td>no</td>\n",
       "      <td>no</td>\n",
       "      <td>telephone</td>\n",
       "      <td>may</td>\n",
       "      <td>fri</td>\n",
       "      <td>...</td>\n",
       "      <td>4</td>\n",
       "      <td>999</td>\n",
       "      <td>0</td>\n",
       "      <td>nonexistent</td>\n",
       "      <td>1.1</td>\n",
       "      <td>93.994</td>\n",
       "      <td>-36.4</td>\n",
       "      <td>4.855</td>\n",
       "      <td>5191.0</td>\n",
       "      <td>no</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>25</td>\n",
       "      <td>services</td>\n",
       "      <td>married</td>\n",
       "      <td>high.school</td>\n",
       "      <td>no</td>\n",
       "      <td>yes</td>\n",
       "      <td>no</td>\n",
       "      <td>telephone</td>\n",
       "      <td>jun</td>\n",
       "      <td>wed</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>999</td>\n",
       "      <td>0</td>\n",
       "      <td>nonexistent</td>\n",
       "      <td>1.4</td>\n",
       "      <td>94.465</td>\n",
       "      <td>-41.8</td>\n",
       "      <td>4.962</td>\n",
       "      <td>5228.1</td>\n",
       "      <td>no</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>38</td>\n",
       "      <td>services</td>\n",
       "      <td>married</td>\n",
       "      <td>basic.9y</td>\n",
       "      <td>no</td>\n",
       "      <td>unknown</td>\n",
       "      <td>unknown</td>\n",
       "      <td>telephone</td>\n",
       "      <td>jun</td>\n",
       "      <td>fri</td>\n",
       "      <td>...</td>\n",
       "      <td>3</td>\n",
       "      <td>999</td>\n",
       "      <td>0</td>\n",
       "      <td>nonexistent</td>\n",
       "      <td>1.4</td>\n",
       "      <td>94.465</td>\n",
       "      <td>-41.8</td>\n",
       "      <td>4.959</td>\n",
       "      <td>5228.1</td>\n",
       "      <td>no</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>47</td>\n",
       "      <td>admin.</td>\n",
       "      <td>married</td>\n",
       "      <td>university.degree</td>\n",
       "      <td>no</td>\n",
       "      <td>yes</td>\n",
       "      <td>no</td>\n",
       "      <td>cellular</td>\n",
       "      <td>nov</td>\n",
       "      <td>mon</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>999</td>\n",
       "      <td>0</td>\n",
       "      <td>nonexistent</td>\n",
       "      <td>-0.1</td>\n",
       "      <td>93.200</td>\n",
       "      <td>-42.0</td>\n",
       "      <td>4.191</td>\n",
       "      <td>5195.8</td>\n",
       "      <td>no</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 21 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   age          job  marital          education default  housing     loan  \\\n",
       "0   30  blue-collar  married           basic.9y      no      yes       no   \n",
       "1   39     services   single        high.school      no       no       no   \n",
       "2   25     services  married        high.school      no      yes       no   \n",
       "3   38     services  married           basic.9y      no  unknown  unknown   \n",
       "4   47       admin.  married  university.degree      no      yes       no   \n",
       "\n",
       "     contact month day_of_week  ...  campaign  pdays  previous     poutcome  \\\n",
       "0   cellular   may         fri  ...         2    999         0  nonexistent   \n",
       "1  telephone   may         fri  ...         4    999         0  nonexistent   \n",
       "2  telephone   jun         wed  ...         1    999         0  nonexistent   \n",
       "3  telephone   jun         fri  ...         3    999         0  nonexistent   \n",
       "4   cellular   nov         mon  ...         1    999         0  nonexistent   \n",
       "\n",
       "  emp.var.rate  cons.price.idx  cons.conf.idx  euribor3m  nr.employed   y  \n",
       "0         -1.8          92.893          -46.2      1.313       5099.1  no  \n",
       "1          1.1          93.994          -36.4      4.855       5191.0  no  \n",
       "2          1.4          94.465          -41.8      4.962       5228.1  no  \n",
       "3          1.4          94.465          -41.8      4.959       5228.1  no  \n",
       "4         -0.1          93.200          -42.0      4.191       5195.8  no  \n",
       "\n",
       "[5 rows x 21 columns]"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_data = pd.read_csv(\"bank-additional.csv\",delimiter=\";\")\n",
    "df_data.head()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 4119 entries, 0 to 4118\n",
      "Data columns (total 21 columns):\n",
      " #   Column          Non-Null Count  Dtype  \n",
      "---  ------          --------------  -----  \n",
      " 0   age             4119 non-null   int64  \n",
      " 1   job             4119 non-null   object \n",
      " 2   marital         4119 non-null   object \n",
      " 3   education       4119 non-null   object \n",
      " 4   default         4119 non-null   object \n",
      " 5   housing         4119 non-null   object \n",
      " 6   loan            4119 non-null   object \n",
      " 7   contact         4119 non-null   object \n",
      " 8   month           4119 non-null   object \n",
      " 9   day_of_week     4119 non-null   object \n",
      " 10  duration        4119 non-null   int64  \n",
      " 11  campaign        4119 non-null   int64  \n",
      " 12  pdays           4119 non-null   int64  \n",
      " 13  previous        4119 non-null   int64  \n",
      " 14  poutcome        4119 non-null   object \n",
      " 15  emp.var.rate    4119 non-null   float64\n",
      " 16  cons.price.idx  4119 non-null   float64\n",
      " 17  cons.conf.idx   4119 non-null   float64\n",
      " 18  euribor3m       4119 non-null   float64\n",
      " 19  nr.employed     4119 non-null   float64\n",
      " 20  y               4119 non-null   object \n",
      "dtypes: float64(5), int64(5), object(11)\n",
      "memory usage: 675.9+ KB\n"
     ]
    }
   ],
   "source": [
    "df_data.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 1.2 Prepare the feature matrix and target vector\n",
    "\n",
    "Load the bank marketing data set into feature matrix `X` and target vector `y`.\n",
    "\n",
    "Print shape and type of `X`, `y`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.model_selection import train_test_split\n",
    "# get all columns apart from y for the features\n",
    "X = df_data.drop(\"y\", axis=1)\n",
    "y = df_data.y\n",
    "\n",
    "print(\"The shape of X is {} and type is {}\".format(X.shape, type(X)))\n",
    "print(\"The shape of y is {} and type is {}\".format(y.shape, type(X)))\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>age</th>\n",
       "      <th>job</th>\n",
       "      <th>marital</th>\n",
       "      <th>education</th>\n",
       "      <th>default</th>\n",
       "      <th>housing</th>\n",
       "      <th>loan</th>\n",
       "      <th>contact</th>\n",
       "      <th>month</th>\n",
       "      <th>day_of_week</th>\n",
       "      <th>duration</th>\n",
       "      <th>campaign</th>\n",
       "      <th>pdays</th>\n",
       "      <th>previous</th>\n",
       "      <th>poutcome</th>\n",
       "      <th>emp.var.rate</th>\n",
       "      <th>cons.price.idx</th>\n",
       "      <th>cons.conf.idx</th>\n",
       "      <th>euribor3m</th>\n",
       "      <th>nr.employed</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>30</td>\n",
       "      <td>blue-collar</td>\n",
       "      <td>married</td>\n",
       "      <td>basic.9y</td>\n",
       "      <td>no</td>\n",
       "      <td>yes</td>\n",
       "      <td>no</td>\n",
       "      <td>cellular</td>\n",
       "      <td>may</td>\n",
       "      <td>fri</td>\n",
       "      <td>487</td>\n",
       "      <td>2</td>\n",
       "      <td>999</td>\n",
       "      <td>0</td>\n",
       "      <td>nonexistent</td>\n",
       "      <td>-1.8</td>\n",
       "      <td>92.893</td>\n",
       "      <td>-46.2</td>\n",
       "      <td>1.313</td>\n",
       "      <td>5099.1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>39</td>\n",
       "      <td>services</td>\n",
       "      <td>single</td>\n",
       "      <td>high.school</td>\n",
       "      <td>no</td>\n",
       "      <td>no</td>\n",
       "      <td>no</td>\n",
       "      <td>telephone</td>\n",
       "      <td>may</td>\n",
       "      <td>fri</td>\n",
       "      <td>346</td>\n",
       "      <td>4</td>\n",
       "      <td>999</td>\n",
       "      <td>0</td>\n",
       "      <td>nonexistent</td>\n",
       "      <td>1.1</td>\n",
       "      <td>93.994</td>\n",
       "      <td>-36.4</td>\n",
       "      <td>4.855</td>\n",
       "      <td>5191.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>25</td>\n",
       "      <td>services</td>\n",
       "      <td>married</td>\n",
       "      <td>high.school</td>\n",
       "      <td>no</td>\n",
       "      <td>yes</td>\n",
       "      <td>no</td>\n",
       "      <td>telephone</td>\n",
       "      <td>jun</td>\n",
       "      <td>wed</td>\n",
       "      <td>227</td>\n",
       "      <td>1</td>\n",
       "      <td>999</td>\n",
       "      <td>0</td>\n",
       "      <td>nonexistent</td>\n",
       "      <td>1.4</td>\n",
       "      <td>94.465</td>\n",
       "      <td>-41.8</td>\n",
       "      <td>4.962</td>\n",
       "      <td>5228.1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>38</td>\n",
       "      <td>services</td>\n",
       "      <td>married</td>\n",
       "      <td>basic.9y</td>\n",
       "      <td>no</td>\n",
       "      <td>unknown</td>\n",
       "      <td>unknown</td>\n",
       "      <td>telephone</td>\n",
       "      <td>jun</td>\n",
       "      <td>fri</td>\n",
       "      <td>17</td>\n",
       "      <td>3</td>\n",
       "      <td>999</td>\n",
       "      <td>0</td>\n",
       "      <td>nonexistent</td>\n",
       "      <td>1.4</td>\n",
       "      <td>94.465</td>\n",
       "      <td>-41.8</td>\n",
       "      <td>4.959</td>\n",
       "      <td>5228.1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>47</td>\n",
       "      <td>admin.</td>\n",
       "      <td>married</td>\n",
       "      <td>university.degree</td>\n",
       "      <td>no</td>\n",
       "      <td>yes</td>\n",
       "      <td>no</td>\n",
       "      <td>cellular</td>\n",
       "      <td>nov</td>\n",
       "      <td>mon</td>\n",
       "      <td>58</td>\n",
       "      <td>1</td>\n",
       "      <td>999</td>\n",
       "      <td>0</td>\n",
       "      <td>nonexistent</td>\n",
       "      <td>-0.1</td>\n",
       "      <td>93.200</td>\n",
       "      <td>-42.0</td>\n",
       "      <td>4.191</td>\n",
       "      <td>5195.8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4114</th>\n",
       "      <td>30</td>\n",
       "      <td>admin.</td>\n",
       "      <td>married</td>\n",
       "      <td>basic.6y</td>\n",
       "      <td>no</td>\n",
       "      <td>yes</td>\n",
       "      <td>yes</td>\n",
       "      <td>cellular</td>\n",
       "      <td>jul</td>\n",
       "      <td>thu</td>\n",
       "      <td>53</td>\n",
       "      <td>1</td>\n",
       "      <td>999</td>\n",
       "      <td>0</td>\n",
       "      <td>nonexistent</td>\n",
       "      <td>1.4</td>\n",
       "      <td>93.918</td>\n",
       "      <td>-42.7</td>\n",
       "      <td>4.958</td>\n",
       "      <td>5228.1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4115</th>\n",
       "      <td>39</td>\n",
       "      <td>admin.</td>\n",
       "      <td>married</td>\n",
       "      <td>high.school</td>\n",
       "      <td>no</td>\n",
       "      <td>yes</td>\n",
       "      <td>no</td>\n",
       "      <td>telephone</td>\n",
       "      <td>jul</td>\n",
       "      <td>fri</td>\n",
       "      <td>219</td>\n",
       "      <td>1</td>\n",
       "      <td>999</td>\n",
       "      <td>0</td>\n",
       "      <td>nonexistent</td>\n",
       "      <td>1.4</td>\n",
       "      <td>93.918</td>\n",
       "      <td>-42.7</td>\n",
       "      <td>4.959</td>\n",
       "      <td>5228.1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4116</th>\n",
       "      <td>27</td>\n",
       "      <td>student</td>\n",
       "      <td>single</td>\n",
       "      <td>high.school</td>\n",
       "      <td>no</td>\n",
       "      <td>no</td>\n",
       "      <td>no</td>\n",
       "      <td>cellular</td>\n",
       "      <td>may</td>\n",
       "      <td>mon</td>\n",
       "      <td>64</td>\n",
       "      <td>2</td>\n",
       "      <td>999</td>\n",
       "      <td>1</td>\n",
       "      <td>failure</td>\n",
       "      <td>-1.8</td>\n",
       "      <td>92.893</td>\n",
       "      <td>-46.2</td>\n",
       "      <td>1.354</td>\n",
       "      <td>5099.1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4117</th>\n",
       "      <td>58</td>\n",
       "      <td>admin.</td>\n",
       "      <td>married</td>\n",
       "      <td>high.school</td>\n",
       "      <td>no</td>\n",
       "      <td>no</td>\n",
       "      <td>no</td>\n",
       "      <td>cellular</td>\n",
       "      <td>aug</td>\n",
       "      <td>fri</td>\n",
       "      <td>528</td>\n",
       "      <td>1</td>\n",
       "      <td>999</td>\n",
       "      <td>0</td>\n",
       "      <td>nonexistent</td>\n",
       "      <td>1.4</td>\n",
       "      <td>93.444</td>\n",
       "      <td>-36.1</td>\n",
       "      <td>4.966</td>\n",
       "      <td>5228.1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4118</th>\n",
       "      <td>34</td>\n",
       "      <td>management</td>\n",
       "      <td>single</td>\n",
       "      <td>high.school</td>\n",
       "      <td>no</td>\n",
       "      <td>yes</td>\n",
       "      <td>no</td>\n",
       "      <td>cellular</td>\n",
       "      <td>nov</td>\n",
       "      <td>wed</td>\n",
       "      <td>175</td>\n",
       "      <td>1</td>\n",
       "      <td>999</td>\n",
       "      <td>0</td>\n",
       "      <td>nonexistent</td>\n",
       "      <td>-0.1</td>\n",
       "      <td>93.200</td>\n",
       "      <td>-42.0</td>\n",
       "      <td>4.120</td>\n",
       "      <td>5195.8</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>4119 rows × 20 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      age          job  marital          education default  housing     loan  \\\n",
       "0      30  blue-collar  married           basic.9y      no      yes       no   \n",
       "1      39     services   single        high.school      no       no       no   \n",
       "2      25     services  married        high.school      no      yes       no   \n",
       "3      38     services  married           basic.9y      no  unknown  unknown   \n",
       "4      47       admin.  married  university.degree      no      yes       no   \n",
       "...   ...          ...      ...                ...     ...      ...      ...   \n",
       "4114   30       admin.  married           basic.6y      no      yes      yes   \n",
       "4115   39       admin.  married        high.school      no      yes       no   \n",
       "4116   27      student   single        high.school      no       no       no   \n",
       "4117   58       admin.  married        high.school      no       no       no   \n",
       "4118   34   management   single        high.school      no      yes       no   \n",
       "\n",
       "        contact month day_of_week  duration  campaign  pdays  previous  \\\n",
       "0      cellular   may         fri       487         2    999         0   \n",
       "1     telephone   may         fri       346         4    999         0   \n",
       "2     telephone   jun         wed       227         1    999         0   \n",
       "3     telephone   jun         fri        17         3    999         0   \n",
       "4      cellular   nov         mon        58         1    999         0   \n",
       "...         ...   ...         ...       ...       ...    ...       ...   \n",
       "4114   cellular   jul         thu        53         1    999         0   \n",
       "4115  telephone   jul         fri       219         1    999         0   \n",
       "4116   cellular   may         mon        64         2    999         1   \n",
       "4117   cellular   aug         fri       528         1    999         0   \n",
       "4118   cellular   nov         wed       175         1    999         0   \n",
       "\n",
       "         poutcome  emp.var.rate  cons.price.idx  cons.conf.idx  euribor3m  \\\n",
       "0     nonexistent          -1.8          92.893          -46.2      1.313   \n",
       "1     nonexistent           1.1          93.994          -36.4      4.855   \n",
       "2     nonexistent           1.4          94.465          -41.8      4.962   \n",
       "3     nonexistent           1.4          94.465          -41.8      4.959   \n",
       "4     nonexistent          -0.1          93.200          -42.0      4.191   \n",
       "...           ...           ...             ...            ...        ...   \n",
       "4114  nonexistent           1.4          93.918          -42.7      4.958   \n",
       "4115  nonexistent           1.4          93.918          -42.7      4.959   \n",
       "4116      failure          -1.8          92.893          -46.2      1.354   \n",
       "4117  nonexistent           1.4          93.444          -36.1      4.966   \n",
       "4118  nonexistent          -0.1          93.200          -42.0      4.120   \n",
       "\n",
       "      nr.employed  \n",
       "0          5099.1  \n",
       "1          5191.0  \n",
       "2          5228.1  \n",
       "3          5228.1  \n",
       "4          5195.8  \n",
       "...           ...  \n",
       "4114       5228.1  \n",
       "4115       5228.1  \n",
       "4116       5099.1  \n",
       "4117       5228.1  \n",
       "4118       5195.8  \n",
       "\n",
       "[4119 rows x 20 columns]"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 2. Inspect the data \n",
    "\n",
    "### 2.1 View summary statistics\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_data.describe()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 2.2 Class (im)balance\n",
    "Use `value_counts()` on the target vector `y` to report the number of samples in each class to check class imbalance."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "no     3668\n",
       "yes     451\n",
       "Name: y, dtype: int64"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y.value_counts()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Given the above values, the classes are imbalanced. Hence, the train-test splits need to be stratified.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 3. Preprocessing\n",
    "In this dataset, some features are discrete and nominal and need to be encoded while some are continuous. I will use a `OneHotEncoder` for the nominal features and use a `StandardScaler` for the continuous features.\n",
    "\n",
    "The target vector is discrete and nominal as well. While sklearn is OK using string labels, I will use a `LabelEncoder` to convert strings to integers and keep the encoder to translate between the two representations.\n",
    "\n",
    "### 3.1 Onehot encoding and standard scaling of features\n",
    "Use a `ColumnTransformer` to convert `X` into one-hot-encoded features for categorical features and a `StandardScaler` for the continuous features. The transformed features is stored in a varible `X_enc`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.compose import ColumnTransformer, make_column_selector\n",
    "from sklearn.preprocessing import StandardScaler, OneHotEncoder\n",
    "\n",
    "ct = ColumnTransformer(\n",
    "    [(\"scaling\", StandardScaler(), make_column_selector(dtype_exclude=object)),\n",
    "     (\"onehot\", OneHotEncoder(sparse=False), make_column_selector(dtype_include=object))])\n",
    "\n",
    "X_enc = ct.fit_transform(X)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "X_enc.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 3.2 Label encode target vector \n",
    "I used the `LabelEncoder` to encode the target vector `y`, saved in a varibale `y_enc`.\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(4119,)\n",
      "['no' 'yes']\n"
     ]
    }
   ],
   "source": [
    "from sklearn.preprocessing import LabelEncoder\n",
    "\n",
    "le = LabelEncoder()\n",
    "y_enc = le.fit_transform(y)\n",
    "print(y_enc.shape)\n",
    "print(le.classes_)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 4. Create training and test sets\n",
    "Using scikit-learn `train_test_split()` with parameters `random_state=37`, `test_size=0.2`, `stratify=y`. I split `X_enc` and `y_enc` into training and test sets."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.model_selection import train_test_split\n",
    "\n",
    "X_train, X_test, y_train, y_test = train_test_split(X_enc, y_enc, test_size=0.2,stratify=y, random_state=37)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 5. Compare models using cross-validation\n",
    "Creating a list containing a `LogisticRegression()`, \n",
    "          `SVC()`,\n",
    "          `GaussianNB()`,\n",
    "        `RandomForestClassifier(random_state=55)`, \n",
    "         `GradientBoostingClassifier(random_state=56)` objects.\n",
    "\n",
    "I iterate this list, then:\n",
    "- compute the **average precision** using `get_classifier_cv_score()` defined above, \n",
    "- rank the models based on validation **average precision** (best first),\n",
    "- and print the ranked models training and validation scores with **3 decimal places**. \n",
    "\n",
    "I use training data and 7-fold cross-validation."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "GradientBoostingClassifier train_score = 0.606, validation_score = 0.873\n",
      "LogisticRegression train_score = 0.604, validation_score = 0.642\n",
      "RandomForestClassifier train_score = 0.594, validation_score = 1.000\n",
      "SVC train_score = 0.591, validation_score = 0.826\n",
      "GaussianNB train_score = 0.377, validation_score = 0.392\n"
     ]
    }
   ],
   "source": [
    "# TODO: add cross-validation comparison here\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn.svm import SVC\n",
    "from sklearn.naive_bayes import GaussianNB\n",
    "from sklearn.ensemble import RandomForestClassifier, GradientBoostingClassifier\n",
    "\n",
    "results = []\n",
    "models = [LogisticRegression(max_iter=10000),  SVC(),  GaussianNB(),\\\n",
    "          RandomForestClassifier(random_state=55), GradientBoostingClassifier(random_state=56)]\n",
    "\n",
    "for model in models:\n",
    "    train_score, val_score = get_classifier_cv_score(model, X_train_scaled, y_train, scoring = 'average_precision')\n",
    "    results.append((val_score, train_score, model))\n",
    "    \n",
    "sorted_result = sorted(results, reverse = True)\n",
    "\n",
    "for train_score, test_score, model in sorted_result:\n",
    "    print(\"{} train_score = {:.3f}, validation_score = {:.3f}\".format(model.__class__.__name__,train_score, test_score))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 6. Hyperparameter tuning using grid search with pipeline\n",
    "\n",
    "The inital cross-validation above showed that both DecisionTree based models might have merit. \n",
    "\n",
    "Support vector machine classifier might also perform well if properly tuned.\n",
    "\n",
    "Next, hyperparameters are tuned using grid search."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 6.1 Grid search for RandomForestClassifier \n",
    "\n",
    "Perform grid search using `GridSearchCV` for the `RandomForestClassifier(random_state=55)`.\n",
    "\n",
    "I use a pipeline to chain the PCA and classifier steps.\n",
    "\n",
    "The grid search uses a 7-fold cross-validation, and `average_precision` as the scoring function. \n",
    "\n",
    "After several iterations, I settled on using the following values for my hyperparameters because the best grid search result had the values fall in the middle the given range:\n",
    "- `'n_estimators': [100, 200, 500, 700, 1000]`\n",
    "- `'max_depth': [5,7,10,50]`\n",
    "- `'n_components': 5, 10, 20]`\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 82,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn.pipeline import Pipeline\n",
    "from sklearn.decomposition import PCA\n",
    "\n",
    "pipe = Pipeline(steps=[('reduce_dim', PCA()), \n",
    "                      ('classifier', RandomForestClassifier(random_state=55))])\n",
    "                      "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 89,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.model_selection import GridSearchCV\n",
    "param_grid = {'reduce_dim__n_components':[5, 10, 20],\\\n",
    "              'classifier__n_estimators': [100, 200, 500, 700, 1000],\\\n",
    "             'classifier__max_depth': [5,7,10,50]}\n",
    "             \n",
    "grid_rf = GridSearchCV(pipe, param_grid, scoring= \"average_precision\",\\\n",
    "                    cv = 7, n_jobs = 4, return_train_score = True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 90,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "GridSearchCV(cv=7,\n",
       "             estimator=Pipeline(steps=[('reduce_dim', PCA()),\n",
       "                                       ('classifier',\n",
       "                                        RandomForestClassifier(random_state=55))]),\n",
       "             n_jobs=4,\n",
       "             param_grid={'classifier__max_depth': [5, 7, 10, 50],\n",
       "                         'classifier__n_estimators': [100, 200, 500, 700, 1000],\n",
       "                         'reduce_dim__n_components': [5, 10, 20]},\n",
       "             return_train_score=True, scoring='average_precision')"
      ]
     },
     "execution_count": 90,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#perform the grid search by calling fit()\n",
    "grid_rf.fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 91,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'classifier__max_depth': 7, 'classifier__n_estimators': 500, 'reduce_dim__n_components': 10}\n",
      "training score = 0.895; validation score = 0.608\n"
     ]
    }
   ],
   "source": [
    "print_grid_search_result(grid_rf)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 164,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 576x396 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plot_grid_search_results(grid_rf)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 6.2 Gradient boosting classifier \n",
    "Perform grid search using `GridSearchCV` for the `GradientBoostingClassifier(max_depth=5, random_state=56)`.\n",
    "\n",
    "Grid search to use 7-fold cross-validation, and `average_precision` as the scoring function. Note that there is a `n_jobs` parameter to run search in parallel. Setting it to the number of CPU cores works well.\n",
    "\n",
    "Use the following hyperparameters and values:\n",
    "- `'n_estimators': [50, 100, 200]`,\n",
    "- `'learning_rate': [0.001, 0.01, 0.1, 1.0]`\n",
    "\n",
    "Use `print_grid_search_result()` and `plot_grid_search_result()` functions defined above to show the results."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 97,
   "metadata": {},
   "outputs": [],
   "source": [
    "pipe = Pipeline(steps=[('reduce_dim', PCA()), \n",
    "                      ('classifier', GradientBoostingClassifier(random_state=56))])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 98,
   "metadata": {},
   "outputs": [],
   "source": [
    "param_grid = {'reduce_dim__n_components':[20, 30, 50, 63],\\\n",
    "              'classifier__n_estimators': [ 100, 200, 500, 700, 1000],\\\n",
    "             'classifier__learning_rate': [0.001, 0.01, 0.1, 1.0], \\\n",
    "             'classifier__max_depth': [3, 5, 7]}\n",
    "             "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 99,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Setup grid search for GradientBoostingClassifier(max_depth=5, random_state=56)\n",
    "\n",
    "grid_gbc = GridSearchCV(pipe, param_grid,\\\n",
    "                    scoring = 'average_precision', cv = 7, n_jobs = 4, return_train_score= True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# perform the grid search by calling fit()\n",
    "grid_gbc.fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 96,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'classifier__learning_rate': 0.01, 'classifier__n_estimators': 200, 'reduce_dim__n_components': 63}\n",
      "training score = 0.957; validation score = 0.576\n"
     ]
    }
   ],
   "source": [
    "# call print_grid_search_result() to print the results\n",
    "print_grid_search_result(grid_gbc)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 168,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x396 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plot_grid_search_results(grid_gbc)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 6.3 SVC grid search\n",
    "Perform grid search using `GridSearchCV` for the `SVC()`.\n",
    "\n",
    "Grid search to use 7-fold cross-validation, and `average_precision` as the scoring function. Note that there is a `n_jobs` parameter to run search in parallel. Setting it to the number of CPU cores works well.\n",
    "\n",
    "Use the following hyperparameters and values:\n",
    "- `'C': [0.0001, 0.001, 0.01, 0.1]`\n",
    "- `'gamma': [0.1, 1, 10, 100]`\n",
    "\n",
    "Use `print_grid_search_result()` and `plot_grid_search_result()` functions defined above to show the results."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "pipe = Pipeline(steps=[('reduce_dim', PCA()), \n",
    "                      ('classifier', SVC())])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Setup grid search for SVC()\n",
    "param_grid = {'reduce_dim__n_components':[20, 30, 50, 63],\\\n",
    "              'classifier__C': [0.0001, 0.001, 0.01, 0.1],\\\n",
    "             'classifier__gamma': [0.1, 1, 10, 100]}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 169,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "grid_svc = GridSearchCV(pipe, param_grid, scoring = \"average_precision\", n_jobs = 4, cv = 7, return_train_score=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 170,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "GridSearchCV(cv=7, estimator=SVC(), n_jobs=4,\n",
       "             param_grid={'C': [0.0001, 0.001, 0.01, 0.1],\n",
       "                         'gamma': [0.1, 1, 10, 100]},\n",
       "             return_train_score=True, scoring='average_precision')"
      ]
     },
     "execution_count": 170,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# perform the grid search by calling fit()\n",
    "grid_svc.fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 171,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'C': 0.0001, 'gamma': 10}\n",
      "training score = 0.779; validation score = 0.772\n"
     ]
    }
   ],
   "source": [
    "# call print_grid_search_result() to print the results\n",
    "print_grid_search_result(grid_svc)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 172,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x396 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# call plot_grid_search_results() to plot validation metrics for all hyperparameter combinations\n",
    "plot_grid_search_results(grid_svc)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Grid search summary"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Random Forest Classifier:\n",
    "training score = 0.806; validation score = 0.794\n",
    "\n",
    "Gradient Boosting Classifier:\n",
    "training score = 0.806; validation score = 0.795\n",
    "\n",
    "SVC: \n",
    "training score = 0.779; validation score = 0.772\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 7. Best model: Find a better threshold\n",
    "\n",
    "### 7.1 Precision and recall curve\n",
    "\n",
    "From the results above, it looks like `RandomForestClassifier()` performs well.\n",
    "\n",
    "Using the training dataset and best `RandomForestClassifier()` from the grid search above:\n",
    "1. Calculate predicted probabilities using `cross_val_predict()` with parameters `cv=7, method='predict_proba'`.\n",
    "2. Plot the precision-recall curve indicating where the default threshold 0.5 lies (see lecture notebook for an example).\n",
    "\n",
    "Include a legend and axis labels.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 173,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Calculate predicted probabilities using cross_val_predict(cv=7, method='predict_proba')\n",
    "\n",
    "from sklearn.model_selection import cross_val_predict\n",
    "\n",
    "y_pred_proba = cross_val_predict(grid_rf.best_estimator_, X_train, y_train, cv=7, method='predict_proba')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 174,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.legend.Legend at 0x7fc5dddf69d0>"
      ]
     },
     "execution_count": 174,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x396 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Plot precision-recall curve\n",
    "from sklearn.metrics import precision_recall_curve\n",
    "\n",
    "precision_rf, recall_rf, thresholds_rf = precision_recall_curve(y_train, y_pred_proba[:,1])\n",
    "\n",
    "close_default_rf = np.argmin(np.abs(thresholds_rf - 0.5))\n",
    "\n",
    "plt.plot(precision_rf[close_default_rf], recall_rf[close_default_rf], 'o', c='g',\n",
    "         markersize=10, label=\"threshold 0.5\", fillstyle=\"none\", mew=2)\n",
    "\n",
    "plt.plot(precision_rf, recall_rf)\n",
    "\n",
    "plt.xlabel(\"Precision\")\n",
    "plt.ylabel(\"Recall\")\n",
    "plt.legend(loc=\"best\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 7.2 Find a better threshold\n",
    "It is important in this application to achieve high recall. Determine the probability threshold to achieve recall higher than 0.999. Store this threshold in a variable and print it."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 175,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[0.01912227]\n"
     ]
    }
   ],
   "source": [
    "#TODO: Find and print threshold for recall>0.999\n",
    "desired_recall = 0.999\n",
    "idx = np.argwhere(recall_rf >= 0.999)[-1]\n",
    "idx\n",
    "thresh_desired_recall = thresholds_rf[idx]\n",
    "print(thresh_desired_recall)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 8. Retrain best model\n",
    "Retrain the best `RandomForestClassifier()` from the grid search above on the training dataset."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 176,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "RandomForestClassifier(max_depth=11, n_estimators=700, random_state=55)"
      ]
     },
     "execution_count": 176,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Retrain random forest classifier\n",
    "grid_rf.best_estimator_.fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 9. Evaluate on test data\n",
    "\n",
    "Using the retrained model and the test dataset:\n",
    "- print the classification report\n",
    "- plot the confusion matrix using plot_confusion_matrix()\n",
    "\n",
    "Make sure the plot has class labels and a title.\n",
    "\n",
    "Repeat these steps for the default threshold and the optimal threshold determined in step 7."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 9.1 Evaluation with default threshold"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 177,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.69      0.76      0.72       843\n",
      "           1       0.71      0.63      0.67       782\n",
      "\n",
      "    accuracy                           0.70      1625\n",
      "   macro avg       0.70      0.69      0.69      1625\n",
      "weighted avg       0.70      0.70      0.70      1625\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# print classification report using default threshold\n",
    "from sklearn.metrics import classification_report\n",
    "\n",
    "y_pred_default =  grid_rf.best_estimator_.predict(X_test)\n",
    "print(classification_report(y_test, y_pred_default))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 178,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x396 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#call plot_confusion_matrix()\n",
    "plot_confusion_matrix(y_test, y_pred_default, [\"yes\", \"no\"], title='with default threshold')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 9.2 Evaluation with new threshold form Step 7."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 179,
   "metadata": {},
   "outputs": [],
   "source": [
    "y_pred_lower_threshold = grid_rf.best_estimator_.predict_proba(X_test) > thresh_desired_recall\n",
    "y_pred_lower_threshold = y_pred_lower_threshold[:, 1].astype(int)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 180,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       1.00      0.21      0.35       843\n",
      "           1       0.54      1.00      0.70       782\n",
      "\n",
      "    accuracy                           0.59      1625\n",
      "   macro avg       0.77      0.60      0.52      1625\n",
      "weighted avg       0.78      0.59      0.52      1625\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# print classification report using lower threshold\n",
    "print(classification_report(y_test, y_pred_lower_threshold))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 181,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x396 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#call plot_confusion_matrix()\n",
    "plot_confusion_matrix(y_test, y_pred_lower_threshold, [\"edible\", \"poisonous\"], title= 'with default threshold = 0.019')\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### *Question 6:* What are the precision, recall and accuracy on the test set using the default and optimal thresholds of the best (tuned) random forest model?"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Default threshold : 0.5\n",
    "\n",
    "precision: 0.71      \n",
    "\n",
    "recall: 0.63\n",
    "\n",
    "accuracy: 0.70\n",
    "\n",
    "\n",
    "Optimal threshold : 0.019\n",
    "\n",
    "precision:  0.54      \n",
    "\n",
    "recall: 1.00\n",
    "\n",
    "accuracy:  0.59\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### *Question 7:* How many false negatives does the model produce on the test set with the default and optimal thresholds of the best (tuned) random forest model.?"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Default threshold : 0.5\n",
    "\n",
    "False negatives: 289\n",
    "\n",
    "Optimal threshold: 0.019\n",
    "\n",
    "False negatives: 0\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 10. Conclusion\n",
    "\n",
    "In conclusion, comment on the following items:\n",
    "- In the classification of edible vs poisonous mushrooms, why is high recall desired?\n",
    "- In the classification of edible vs poisonous mushrooms, what do false positive and false negative predictions mean and what are the consequences of making these mistakes?\n",
    "- Is the fine-tuned model with new threshold satisfactory, i.e. a useful model for the task, or is more work needed? Explain."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "* A high recall is desired because we want to correctly predict all the poisonous mushrooms.\n",
    "\n",
    "* For this classfication, a high precision is desired because we want to correctly identify the customers who will respond positively to the markting campain. This will help the bank to focus the marketing on these customers and help to save marketing costs incurred by marketing to all the customers.\n",
    "\n",
    "* A false positive prediction means that a mushroom which is edible is predicted as poisonous, and a false negative prediction means that a mushroom which is poisonous is predicted as edible. A false positive mistake in this case is not really costly, it just means we have less edible mushrooms. However a false negative mistake is very costly and could possibly be a fatal one because we classify a poisonous mushroom as being edible. \n",
    "\n",
    "* The fine-tuned model is able to correctly classify all the poisonous mushrooms, however in doing this, it classifies a lot of edible mushrooms as being poisonous. If the business goal does not care about having a good number of edible mushrooms, then this model is satisfactory but if we also want to reduce wastage of edible mushrooms then we need to improve the precision score of the model and reduce the number of false positives.\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Reflection\n",
    "\n",
    "*YOUR ANSWER HERE*\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "I find the scoring parameter of the cross_validate() method really handy in that it makes it easy to get the average_precision scores without having to use a precision_recall_curve. Also this task made it easy to understand the importance of thresholds in adjusting the trade-off between precision and recall in order to fit our business goal. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
